---
title: Writing posts with emacs
date: 2021-02-22
permalink: /posts/2021/02/Writing-posts-with-emacs
excerpt: Detail of the process of writing posts on a Jekyll blog using Emacs
tags:
  - emacs
  - org-mode
  - jekyll
  - post
---
<p>
I tried lately to get a bit more into emacs, by rewriting my
configuration, and try to learn bits of emacs-lisp in the process.  It
lead me to try to be able to maintain this website, and to create
posts using org-mode, and automating the process the best I could.
Indeed, I found the process of writing in markdown, whose syntax is
close albeit different enough from the org-mode quite painful.
</p>

<p>
For this, I use a combination of org-mode, yasnippet, all of this
wrapped in a simple function. This is mainly stitching together
various pieces I found here and there, and trying to understand the
process. I am by no means an expert in anything and I do this for my
own entertainment.
</p>

<div id="outline-container-orgbc538b6" class="outline-2">
<h2 id="orgbc538b6">Create the file using a elisp function</h2>
<div class="outline-text-2" id="text-orgbc538b6">
<p>
We are going to define a function, which creates the proper file,
with the proper formatting etc.
This will be called using the classic <code>M+x create-blogpost</code>.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #b58900;">create-blogpost</span> (x)
    <span style="color: #35a69c; font-style: italic;">"Create a new blogpost."</span>
    (<span style="color: #859900; font-weight: bold;">interactive</span> <span style="color: #2aa198;">"sPost title: "</span>)
    (<span style="color: #859900; font-weight: bold;">let</span> ((date (shell-command-to-string <span style="color: #2aa198;">"echo -n $(date +%Y-%m-%d)"</span>))
          (title (s-replace <span style="color: #2aa198;">" "</span> <span style="color: #2aa198;">"-"</span> x))
          filename filepath)
      (<span style="color: #859900; font-weight: bold;">setf</span> filename (concat date <span style="color: #2aa198;">"-"</span> title <span style="color: #2aa198;">".org"</span>))
      (<span style="color: #859900; font-weight: bold;">setf</span> filepath (concat <span style="color: #2aa198;">"~/vtrappler.github.io/org_posts/"</span> filename))
      (write-region <span style="color: #2aa198;">""</span> 0 filepath t)
      (find-file filepath))
      (insert <span style="color: #2aa198;">"jekyll-autofilled-frontmatter"</span>) <span style="color: #96A7A9; font-style: italic;">;; </span><span style="color: #96A7A9; font-style: italic;">use the yassnippet</span>
      (yas-expand)
      )
</pre>
</div>

<p>
Let us describe step by step how this function is created:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">interactive</span> <span style="color: #2aa198;">"sPost title:"</span>)
</pre>
</div>
<p>
This prompts an user input, in this case the title of the post we wish
to create.  The seemingly missplaced <code>s</code> is not a typo, but a code
letter indicating that the format of the input is a string. This
defines <code>x</code>, as it is not stated when calling the function.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">let</span> ((date (shell-command-to-string <span style="color: #2aa198;">"echo -n $(date +%Y-%m-%d)"</span>))
              (title (s-replace <span style="color: #2aa198;">" "</span> <span style="color: #2aa198;">"-"</span> x))
              filename filepath)
</pre>
</div>
<p>
The bash command <code>"echo -n $(date +%Y-%m-%d)"</code> here outputs the
current date, in the format YYYY-MM-DD, and we assign the output
string to the variable <code>date</code>.  Then we replace all the whitespaces in
the title by dashes, and assign it to the variable <code>title</code>. Finally,
the <code>filename</code> and <code>filepath</code> variables are declared. Their values are set next:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">setf</span> filename (concat date <span style="color: #2aa198;">"-"</span> title <span style="color: #2aa198;">".org"</span>))
(<span style="color: #859900; font-weight: bold;">setf</span> filepath (concat <span style="color: #2aa198;">"~/vtrappler.github.io/org_posts/"</span> filename))
</pre>
</div>
<p>
The filename is then in the format <code>YYYY-MM-DD-title-with-dashes.org</code>,
as recognized by Jekyll.
</p>

<p>
The next two calls ensures that this file can and is created.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(write-region <span style="color: #2aa198;">""</span> 0 filepath t)
(find-file filepath)) <span style="color: #96A7A9; font-style: italic;">;;</span><span style="color: #96A7A9; font-style: italic;">Closes the parenthesis of (let ...</span>
</pre>
</div>

<p>
The last calls inside the function insert the text necessary to
incorporate the Jekyll frontmatter.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(insert <span style="color: #2aa198;">"jekyll-autofilled-frontmatter"</span>) <span style="color: #96A7A9; font-style: italic;">;; </span><span style="color: #96A7A9; font-style: italic;">insert the key of the snippet</span>
(yas-expand) 
</pre>
</div>
<p>
The snippet is described in the next section
</p>
</div>
</div>

<div id="outline-container-org154e2a7" class="outline-2">
<h2 id="org154e2a7">Using yassnippets for the frontmatter used in jekyll</h2>
<div class="outline-text-2" id="text-org154e2a7">
<p>
We created in a separate file the following <a href="https://joaotavora.github.io/yasnippet/">snippet</a> to generate
properly the Jekyll frontmatter. As one can execute directly elisp
code at the insertion of the snippet, we can exploit this property in
order to get the correct format for the file. To avoid passing
arguments from the <code>create-blogpost</code>, we are going to simply retrieve
all the info, by stripping the filename of the dashes, while the
current date and the <code>.org</code> extension are removed in a hardcoded
manner.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"># -*- mode: snippet -*-
# name: jekyll-frontmatter-create
# key: jekyll-autofilled-frontmatter
# --

#+BEGIN_EXPORT html
---
layout: post
title: `(s-replace <span style="color: #2aa198;">"-"</span> <span style="color: #2aa198;">" "</span> (substring (buffer-name) 11 -4))`
date: `(shell-command-to-string <span style="color: #2aa198;">"echo -n $(date +%Y-%m-%d)"</span>))<span style="color: #b58900;">`</span>
permalink: /posts/`(shell-command-to-string <span style="color: #2aa198;">"echo -n $(date +%Y/%m)"</span>)`/`(substring (buffer-name) 11 -4)`
tags:
---
#+END_EXPORT
#+OPTIONS: toc:nil
#+OPTIONS: unnumbered:1
</pre>
</div>
</div>
</div>
<div id="outline-container-orgca4e061" class="outline-2">
<h2 id="orgca4e061">Export org files to html</h2>
<div class="outline-text-2" id="text-orgca4e061">
<p>
Finally, once the org file is written, we are going to export it to
html: the parameters of publication are adapted from <a href="https://thackl.github.io/blogging-with-emacs-org-mode-and-jekyll">there</a>
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">setq</span> org-publish-project-alist
<span style="color: #96A7A9; font-style: italic;">;; </span><span style="color: #96A7A9; font-style: italic;">https://thackl.github.io/blogging-with-emacs-org-mode-and-jekyll</span>
      '((<span style="color: #2aa198;">"vtrappler.github.io"</span> <span style="color: #96A7A9; font-style: italic;">;; </span><span style="color: #96A7A9; font-style: italic;">name of the page )</span>
         <span style="color: #96A7A9; font-style: italic;">;; </span><span style="color: #96A7A9; font-style: italic;">Path to org files.</span>
         <span style="color: #d33682; font-style: italic;">:base-directory</span> <span style="color: #2aa198;">"~/vtrappler.github.io/org_posts/"</span>
         <span style="color: #d33682; font-style: italic;">:base-extension</span> <span style="color: #2aa198;">"org"</span>
         <span style="color: #96A7A9; font-style: italic;">;; </span><span style="color: #96A7A9; font-style: italic;">Path to Jekyll Posts</span>
         <span style="color: #d33682; font-style: italic;">:publishing-directory</span> <span style="color: #2aa198;">"~/vtrappler.github.io/_posts/"</span>
         <span style="color: #d33682; font-style: italic;">:recursive</span> t
         <span style="color: #d33682; font-style: italic;">:publishing-function</span> org-html-publish-to-html
         <span style="color: #d33682; font-style: italic;">:headline-levels</span> 4
         <span style="color: #d33682; font-style: italic;">:html-extension</span> <span style="color: #2aa198;">"html"</span>
         <span style="color: #d33682; font-style: italic;">:body-only</span> t
         )))
</pre>
</div>
</div>
</div>

<div id="outline-container-org4f52bdc" class="outline-2">
<h2 id="org4f52bdc">Final process</h2>
<div class="outline-text-2" id="text-org4f52bdc">
<p>
The final process of writing a blog post is then
</p>
<ul class="org-ul">
<li><code>M+x create-blogpost</code>, and type the title of the post when prompted</li>
<li>Write the post</li>
<li><code>C-c C-e P f</code>, publish to html</li>
<li>Add, commit and push if applicable to update your website</li>
</ul>
</div>
</div>
